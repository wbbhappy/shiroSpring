<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   	xmlns:context="http://www.springframework.org/schema/context"
		xmlns:aop="http://www.springframework.org/schema/aop"
	   	xmlns:util="http://www.springframework.org/schema/util"
		xmlns:tx="http://www.springframework.org/schema/tx"
	   	xmlns:task="http://www.springframework.org/schema/task"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-3.0.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">
	
	<!-- 缓存管理器，使用Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager"></property>
	</bean>
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml"></property>
		<property name="shared" value="true"></property>
	</bean>
	
	<!-- 凭证匹配器（注入缓存管理器!!!!!） -->
	<bean id="credentialsMatcher" class="credentials.RetryLimitHashedCredentialsMatcher">
		<!-- 缓存管理器 -->
		<constructor-arg ref="cacheManager"/>
		<!-- 加密方式 -->
		<property name="hashAlgorithmName" value="md5"/>
		<!-- 循环次数 -->
		<property name="hashIterations" value="2"/>
		<!-- 是否存储散列后的密码为16进制,需要和生成密码时的一样,默认是base64 -->
		<property name="storedCredentialsHexEncoded" value="true"/>
	</bean>
	
	<!-- Realm实现（加入凭证匹配器——已注入缓存管理器!!!!!）  -->
	<bean id="userRealm" class="realm.UserRealm">
		<property name="userService" ref="userService"/>
		<property name="credentialsMatcher" ref="credentialsMatcher"/>
		<!-- 启用缓存 -->
		<property name="cachingEnabled" value="true"/>
		<!-- 启用身份验证缓存，即缓存AuthenticationInfo信息 -->
		<property name="authenticationCachingEnabled" value="true"/>
		<!-- 缓存AuthenticationInfo信息的缓存名称 -->
		<property name="authenticationCacheName" value="authenticationCache"/>
		<!-- 启用授权缓存，即缓存AuthorizationInfo信息 -->
		<property name="authorizationCachingEnabled" value="true"/>
		<!-- 缓存AuthorizationInfo信息的缓存名称 -->
		<property name="authorizationCacheName" value="authorizationCache"/>
	</bean>
	
	<!-- 会话ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	
	<!-- 会话Cookie模板,用于生产Session ID Cookie的模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid"/>
		<!-- cookie中设置了HttpOnly属性,那么通过js脚本将无法读取到cookie信息,这样能有效的防止XSS攻击, -->
		<property name="httpOnly" value="true"/>
		<!-- 默认记住50个小时（单位：秒） -->
		<property name="maxAge" value="180000"/>
	</bean>
	
	<!-- 会话DAO，负责缓存功能的CRUD -->
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<!-- 存放在ehcache的shiro-activeSessionCache缓存片区 -->
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
		<property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	
	<!-- 会话管理器，用于web环境的DefaultWebSessionManager -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 设置会话的全局过期时间（毫秒为单位），默认30分钟 -->
		<property name="globalSessionTimeout" value="1800000"></property>
		<!-- 会话过期时不想删除过期的会话 -->
		<property name="deleteInvalidSessions" value="true"></property>
		<!-- 是否开启会话验证器，默认是开启的 -->
		<property name="sessionValidationSchedulerEnabled" value="true"></property>
		<!-- 设置会话验证调度器，默认就是使用ExecutorServiceSessionValidationScheduler -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"></property>
		<property name="sessionDAO" ref="sessionDAO"></property>
		<!-- 
			是否启用/禁用Session Id Cookie，默认是启用的；
			如果禁用后将不会设置Session Id Cookie，即默认使用了Servlet容器的JSESSIONID，
			且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id。 
		-->
		<property name="sessionIdCookieEnabled" value="true"></property>
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>
	
	<!-- 会话验证调度器，定期验证会话是否已过期 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<!-- 间隔多长时间验证一次，毫秒为单位 -->
		<property name="sessionValidationInterval" value="1800000"></property>
		<property name="sessionManager" ref="sessionManager"></property>
	</bean>
	
	<!-- 安全管理器，用于web环境的DefaultWebSecurityManager -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realms" ref="userRealm"></property>
		<property name="sessionManager" ref="sessionManager"></property>
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>
	
	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"></property>
		<property name="arguments" ref="securityManager"></property>
	</bean>
	
	<!-- 基于Form表单的身份验证过滤器 -->
	<!-- 
		authc 是org.apache.shiro.web.filter.authc.FormAuthenticationFilter 类型的实例，其用于实现基于表单的身份验证；
		通过loginUrl指定当身份验证时的登录表单；
		usernameParam指定登录表单提交的用户名参数名；
		passwordParam指定登录表单提交的密码参数名；
		successUrl指定登录成功后重定向的默认地址（默认是“/”）（如果有上一个地址会自动重定向带该地址）；
		failureKeyAttribute指定登录失败时的request属性key（默认shiroLoginFailure）；这样可以在登录表单得到该错误key显示相应的错误消息；
	-->
	<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<!-- 登录表单的用户名参数名 -->
		<property name="usernameParam" value="username"></property>
		<!-- 登录表单提交的密码参数名 -->
		<property name="passwordParam" value="password"></property>
		<!-- 指定当身份验证时的登录表单 -->
		<property name="loginUrl" value="/login.jsp"></property>
	</bean>
	
	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<property name="loginUrl" value="/login.jsp"></property>
		<property name="unauthorizedUrl" value="/unauthorized.jsp"></property>
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="formAuthenticationFilter"></entry>
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				/index.jsp=anon
				/unauthorized.jsp=anon
				/login.jsp=authc
				/logout=logout
				/**=user
			</value>
		</property>
	</bean>
	
	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
</beans>
